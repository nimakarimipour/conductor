/*
 *  Copyright 2021 Netflix, Inc.
 *  <p>
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *  the License. You may obtain a copy of the License at
 *  <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  <p>
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 *  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 */

plugins {
    id "net.ltgt.errorprone" version "3.0.1"
}

apply plugin: 'groovy'

dependencies {
    implementation project(':conductor-common')
    compileOnly 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework.retry:spring-retry'

    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"

    implementation "commons-io:commons-io:${revCommonsIo}"

    implementation "com.google.protobuf:protobuf-java:${revProtoBuf}"

    implementation "org.apache.commons:commons-lang3"

    implementation "com.fasterxml.jackson.core:jackson-core"

    implementation "com.spotify:completable-futures:${revSpotifyCompletableFutures}"

    implementation "com.jayway.jsonpath:json-path:${revJsonPath}"

    implementation "io.reactivex:rxjava:${revRxJava}"

    implementation "com.netflix.spectator:spectator-api:${revSpectator}"

    implementation "org.apache.bval:bval-jsr:${revBval}"

    implementation "com.github.ben-manes.caffeine:caffeine"

    // JAXB is not bundled with Java 11, dependencies added explicitly
    // These are needed by Apache BVAL
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${revJAXB}"
    implementation "jakarta.activation:jakarta.activation-api:${revActivation}"

    // Only add it as a test dependency. The actual jaxb runtime provider is provided when building the server.
    testImplementation "org.glassfish.jaxb:jaxb-runtime:${revJAXB}"

    testImplementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.retry:spring-retry'
    testImplementation project(':conductor-common').sourceSets.test.output

    testImplementation "org.codehaus.groovy:groovy-all:${revGroovy}"
    testImplementation "org.spockframework:spock-core:${revSpock}"
    testImplementation "org.spockframework:spock-spring:${revSpock}"
    testImplementation "org.junit.vintage:junit-vintage-engine"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    errorprone "com.google.errorprone:error_prone_core:2.3.2"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"

    annotationProcessor "com.uber.nullaway:nullaway:0.10.2"
    annotationProcessor "edu.ucr.cs.riple.nullawayannotator:type-annotator-scanner:1.3.4-SNAPSHOT"
    annotationProcessor "edu.ucr.cs.riple.checkers:ExhaustiveFixSerializer:1.0-SNAPSHOT"
    annotationProcessor "edu.ucr.cs.riple.checkers:NullUnmarkedCollector:1.0-SNAPSHOT"
}

import net.ltgt.gradle.errorprone.CheckSeverity
tasks.withType(JavaCompile) {
    // remove the if condition if you want to run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.errorprone.disableAllChecks = true
        options.errorprone.disableAllWarnings = true
        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            check("TypeAnnotatorScanner", CheckSeverity.ERROR)
            check("ExhaustiveFixSerializer", CheckSeverity.OFF)
            check("NullUnmarkedCollector", CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.netflix.conductor")
            option("NullAway:SerializeFixMetadata", "true")
            option("NullAway:FixSerializationConfigPath", "/tmp/NullAwayFix/nullaway.xml")
            option("TypeAnnotatorScanner:ConfigPath", "/tmp/NullAwayFix/scanner.xml")
        }
    }
    options.compilerArgs << "-Xmaxerrs" << "100000"
    options.compilerArgs << "-Xmaxwarns" << "100000"
}
